// Auto-generated - DO NOT EDIT

package pg_query

type RelOptInfo struct {
	Reloptkind RelOptKind `json:"reloptkind"`

	/* all relations included in this RelOptInfo */
	Relids []uint32 `json:"relids"` /* set of base relids (rangetable indexes) */

	/* size estimates generated by planner */
	Rows  float64 `json:"rows"`  /* estimated number of result tuples */
	Width int     `json:"width"` /* estimated avg width of result tuples */

	/* per-relation planner control flags */
	ConsiderStartup      bool `json:"consider_startup"`       /* keep cheap-startup-cost paths? */
	ConsiderParamStartup bool `json:"consider_param_startup"` /* ditto, for parameterized paths? */

	/* materialization information */
	Reltargetlist              []Node `json:"reltargetlist"` /* Vars to be output by scan of relation */
	Pathlist                   []Node `json:"pathlist"`      /* Path structures */
	Ppilist                    []Node `json:"ppilist"`       /* ParamPathInfos used in pathlist */
	CheapestStartupPath        *Path  `json:"cheapest_startup_path"`
	CheapestTotalPath          *Path  `json:"cheapest_total_path"`
	CheapestUniquePath         *Path  `json:"cheapest_unique_path"`
	CheapestParameterizedPaths []Node `json:"cheapest_parameterized_paths"`

	/* information about a base rel (not set for join rels!) */
	Relid              Index       `json:"relid"`
	Reltablespace      Oid         `json:"reltablespace"`       /* containing tablespace */
	Rtekind            RTEKind     `json:"rtekind"`             /* RELATION, SUBQUERY, or FUNCTION */
	MinAttr            AttrNumber  `json:"min_attr"`            /* smallest attrno of rel (often <0) */
	MaxAttr            AttrNumber  `json:"max_attr"`            /* largest attrno of rel */
	AttrNeeded         []Relids    `json:"attr_needed"`         /* array indexed [min_attr .. max_attr] */
	AttrWidths         []int32     `json:"attr_widths"`         /* array indexed [min_attr .. max_attr] */
	LateralVars        []Node      `json:"lateral_vars"`        /* LATERAL Vars and PHVs referenced by rel */
	LateralRelids      []uint32    `json:"lateral_relids"`      /* minimum parameterization of rel */
	LateralReferencers []uint32    `json:"lateral_referencers"` /* rels that reference me laterally */
	Indexlist          []Node      `json:"indexlist"`           /* list of IndexOptInfo */
	Pages              BlockNumber `json:"pages"`               /* size estimates derived from pg_class */
	Tuples             float64     `json:"tuples"`
	Allvisfrac         float64     `json:"allvisfrac"`
	/* use "struct Plan" to avoid including plannodes.h here */
	Subplan       *Plan        `json:"subplan"`        /* if subquery */
	Subroot       *PlannerInfo `json:"subroot"`        /* if subquery */
	SubplanParams []Node       `json:"subplan_params"` /* if subquery */
	/* use "struct FdwRoutine" to avoid including fdwapi.h here */
	FdwPrivate interface{} `json:"fdw_private"` /* if foreign table */

	/* used by various scans and joins: */
	Baserestrictinfo []Node `json:"baserestrictinfo"` /* RestrictInfo structures (if base
	 * rel) */
	Baserestrictcost QualCost `json:"baserestrictcost"` /* cost of evaluating the above */
	Joininfo         []Node   `json:"joininfo"`         /* RestrictInfo structures for join clauses
	 * involving this rel */
	HasEclassJoins bool `json:"has_eclass_joins"` /* T means joininfo is incomplete */
}
